
"""
    - available public user fields that can be queried. 
    - Name reflects columns in DB
"""
type UserPublic {
  NAME: String
  EMAIL: String
  SOURCE: String
  AVATAR: [FileType]
  # Refers to ID generated in UserRole
  ROLE: Int
  # Status of the current record. Active or inactive
  STATUS: String
  PHONE: String
  GENDER: String
  DOB: String
  PWD: String
  OPT_FOR_MARKETING: String
  COMPANY_ID: String
  SURVEY_ID: String
  # Created timestamp. Auto generated in database. Not needed for create / update mutation
  CREATED_AT: String
  # Creator. Auto generated in database. Not needed for create / update mutation
  CREATED_BY: String
  # Updated timestamp. Auto generated in database. Not needed for create / update mutation
  UPDATED_AT: String
  # Updater. Auto generated in database. Not needed for create / update mutation
  UPDATED_BY: String
  USER_ROLE: String
  # Indicates current record belongs to which module
  MODULE: String
}

"""
    - combined public user data with list of user roles 
    - used for update data
"""
type UserPublicWithRole {
  userPublicOne: UserPublic
  userRole: [UserRole!]!
}

type Query {
"""
    - retrieve all public users
"""
  allUserPublic: [UserPublic!]!
"""
    - retrieve one public user based on email together with roles
"""
  oneUserPublic(email: String!): UserPublicWithRole
}

type Mutation {
"""
    - check if email exist in DB
"""
  checkUserPublic (EMAIL: String!): String
"""
    - create a public user
"""
  createUserPublic(input: String!): UserPublic!
"""
    - register a public user (public-facing)
"""
  registerUserPublic(input: String!): UserPublic!
"""
    - update a public user
"""
  updateUserPublic(email: String!, input: String!): UpdateResp
"""
    - delete a public user
"""
  deleteUserPublic(email: String!): DeleteResp
}